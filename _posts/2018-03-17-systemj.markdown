---
layout: post
title:  "SystemJ - intro"
date:   2018-03-17 14:00:33 +1300
categories: systemj
---

My work at the University of Auckland has been mainly focused around the
programming language called [SystemJ](http://systemjtechnology.com) whose
programming paradigm is inspired from
[Esterel](https://en.wikipedia.org/wiki/Esterel) with extension of
Communicating Sequential Processes
([CSP](https://en.wikipedia.org/wiki/Communicating_sequential_processes)). In
addition to this, SystemJ can also execute Java code directly where the whole
program is compiled and executed on a Java Virtual Machine (JVM) by default,
similar to Scala and Closure.

SystemJ enables capturing complex software systems using a set of locally
synchronous threads, which are suitable for describing closely related software
modules, together with a set of globally asynchronous threads, which are more
loosely coupled. The semantics of the language is based on formal Globally
Asynchronous Locally Synchronous
([GALS](https://en.wikipedia.org/wiki/Globally_asynchronous_locally_synchronous))
model of computation.

The following piece of code is an example of SystemJ program describing
B&eacute;rry's ABRO.

```java
ABRO(input signal A,B,R; output signal O;)->{
  loop {
    abort(R){ 
      {await(A);}||{await(B);}
      emit O;
      loop { pause; }
    }
  }
}
```

This is a purely synchronous program that emits signal O to the external
environment after receiving signals A and B. The program then enters an
infinite loop (`loop{pause;}`) until it captures R that aborts the loop. This
prorgram well features synchronous the subset of the SystemJ language via:
- Signals for exchanging information with the external world. 
- Two synchronous threads (`||`) for capturing signals A and B concurrently.
- Synchronous pre-emption using `abort` that frees the blocked thread in the
  infinite loop.

In SystemJ, the behaviour of this program can formally be described/verified
thanks to its [formal
semantics](https://en.wikipedia.org/wiki/Operational_semantics). In fact, the
behaviour of ABRO can be described using the simple finite state machine as
follows.

![fsm](/images/fsm.png)

You can find a list of useful links below:

- [SystemJ compiler](https://github.com/hjparker/systemj-release/releases).
- [SystemJ manual]({{ site.baseurl }}{% link docs/SystemJ Manual.pdf %})
- [Code examples](https://github.com/hjparker/systemj-demo)









